{"version":3,"sources":["agent-test.js"],"names":["test","require","sinon","proxyquire","agentFixtures","single","Object","assign","db","AgentStub","sandbox","id","config","loggin","MetricStub","belongsTo","spy","beforeEach","create","hasMany","setupDataBase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","findById","deepEqual","ById"],"mappings":";AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;AACA,MAAMG,gBAAgBH,QAAQ,2BAAR,CAAtB;;AAEA,IAAII,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBH,cAAcC,MAAhC,CAAb;AACA,IAAIG,KAAK,IAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,UAAU,IAAd;AACA,IAAIC,KAAK,CAAT;;AAEA,IAAIC,SAAS;AACXC,UAAQ,YAAY,CAAE;AADX,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAWb,MAAMc,GAAN;AADI,CAAjB;;AAIAhB,KAAKiB,UAAL,CAAgB,YAAY;AAC1BP,YAAUR,MAAMQ,OAAN,CAAcQ,MAAd,EAAV;AACAT,cAAY;AACVU,aAAST,QAAQM,GAAR;AADC,GAAZ;AAGA,QAAMI,gBAAgBjB,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMM,SADc;AAEtC,uBAAmB,MAAMK;AAFa,GAAlB,CAAtB;AAIAN,OAAK,MAAMY,cAAcR,MAAd,CAAX;AACD,CAVD;;AAYAZ,KAAKqB,SAAL,CAAe,MAAM;AACnB,MAAIX,OAAJ,EAAa;AACXA,YAAQY,OAAR;AACD;AACF,CAJD;;AAMAtB,KAAK,OAAL,EAAcuB,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACD,CAFD;;AAIAzB,KAAK0B,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,iCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6Bf,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,0CAAjD;AACAS,IAAEI,IAAF,yBAAO,iEAAWZ,SAAX,wBAAqBa,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,mCAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAWZ,SAAX,+BAAqBc,UAArB,aAAgCpB,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,yCAAnD;AACD,CALD;;AAOAT,KAAK0B,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACvC,MAAIO,QAAQ,MAAMtB,GAAGiB,KAAH,CAASM,QAAT,CAAkBpB,EAAlB,CAAlB;AACAY,IAAES,SAAF,CAAYF,KAAZ,EAAmB1B,cAAc6B,IAAd,CAAmBtB,EAAnB,CAAnB,EAA2C,oBAA3C;AACD,CAHD","file":"agent-test.js","sourcesContent":["'use stric'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst agentFixtures = require('./fixtures/agent-fixtures')\n\nlet single = Object.assign({}, agentFixtures.single)\nlet db = null\nlet AgentStub = null\nlet sandbox = null\nlet id = 1\n\nlet config = {\n  loggin: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n  const setupDataBase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDataBase(config)\n})\n\ntest.afterEach(() => {\n  if (sandbox) {\n    sandbox.restore()\n  }\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the model MetricModel')\n  t.true(MetricStub.belongsTo.called, 'MetricStub.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the model AgentModel')\n})\n\ntest.serial('Agent#findById', async t => {\n  let agent = await db.Agent.findById(id)\n  t.deepEqual(agent, agentFixtures.ById(id), 'should be the same')\n})\n"]}