{"version":3,"sources":["agent-test.js"],"names":["test","require","sinon","proxyquire","agentFixtures","db","AgentStub","sandbox","id","config","loggin","MetricStub","belongsTo","spy","beforeEach","createSandbox","hasMany","findById","stub","withArgs","returns","Promise","resolve","ById","setupDataBase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith"],"mappings":";AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;AACA,MAAMG,gBAAgBH,QAAQ,2BAAR,CAAtB;;AAEA;AACA,IAAII,KAAK,IAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,UAAU,IAAd;AACA,IAAIC,KAAK,CAAT;;AAEA,IAAIC,SAAS;AACXC,UAAQ,YAAY,CAAE;AADX,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAWV,MAAMW,GAAN;AADI,CAAjB;;AAIAb,KAAKc,UAAL,CAAgB,YAAY;AAC1BP,YAAUL,MAAMa,aAAN,EAAV;AACAT,cAAY;AACVU,aAAST,QAAQM,GAAR;;AAGX;AAJY,GAAZ,CAKAP,UAAUW,QAAV,GAAqBV,QAAQW,IAAR,EAArB;AACAZ,YAAUW,QAAV,CAAmBE,QAAnB,CAA4BX,EAA5B,EAAgCY,OAAhC,CAAwCC,QAAQC,OAAR,CAAgBlB,cAAcmB,IAAd,CAAmBf,EAAnB,CAAhB,CAAxC;;AAEA,QAAMgB,gBAAgBrB,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMG,SADc;AAEtC,uBAAmB,MAAMK;AAFa,GAAlB,CAAtB;AAIAN,OAAK,MAAMmB,cAAcf,MAAd,CAAX;AACD,CAfD;;AAiBAT,KAAKyB,SAAL,CAAe,MAAM;AACnB,MAAIlB,OAAJ,EAAa;AACXA,YAAQmB,OAAR;AACD;AACF,CAJD;;AAMA1B,KAAK,OAAL,EAAc2B,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACD,CAFD;;AAIA7B,KAAK8B,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUf,OAAV,wBAAkBgB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,iCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUf,OAAV,+BAAkBiB,UAAlB,aAA6BtB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,0CAAjD;AACAgB,IAAEI,IAAF,yBAAO,iEAAWnB,SAAX,wBAAqBoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,mCAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAWnB,SAAX,+BAAqBqB,UAArB,aAAgC3B,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,yCAAnD;AACD,CALD;;AAOA;AACA;AACA;AACA","file":"agent-test.js","sourcesContent":["'use stric'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst agentFixtures = require('./fixtures/agent-fixtures')\n\n//let single = Object.assign({}, agentFixtures.single)\nlet db = null\nlet AgentStub = null\nlet sandbox = null\nlet id = 1\n\nlet config = {\n  loggin: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  //model findById stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.ById(id)))\n\n  const setupDataBase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDataBase(config)\n})\n\ntest.afterEach(() => {\n  if (sandbox) {\n    sandbox.restore()\n  }\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the model MetricModel')\n  t.true(MetricStub.belongsTo.called, 'MetricStub.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the model AgentModel')\n})\n\n// test.serial('Agent#findById', async t => {\n//   let agent = await db.Agent.findById(id)\n//   t.deepEqual(agent, agentFixtures.ById(id), 'should be the same')\n// })\n"]}