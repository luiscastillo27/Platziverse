{"version":3,"sources":["agent-test.js"],"names":["test","require","sinon","proxyquire","db","AgentStub","sandbox","config","loggin","MetricStub","belongsTo","spy","beforeEach","create","hasMany","setupDataBase","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":";AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,IAAIG,KAAK,IAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,UAAU,IAAd;;AAEA,IAAIC,SAAS;AACXC,UAAQ,YAAY,CAAE;AADX,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAWR,MAAMS,GAAN;AADI,CAAjB;;AAIAX,KAAKY,UAAL,CAAgB,YAAY;AAC1BN,YAAUJ,MAAMI,OAAN,CAAcO,MAAd,EAAV;AACAR,cAAY;AACVS,aAASR,QAAQK,GAAR;AADC,GAAZ;AAGA,QAAMI,gBAAgBZ,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAME,SADc;AAEtC,uBAAmB,MAAMI;AAFa,GAAlB,CAAtB;AAIAL,OAAK,MAAMW,cAAcR,MAAd,CAAX;AACD,CAVD;;AAYAP,KAAKgB,SAAL,CAAe,MAAM;AACnB,MAAIV,OAAJ,EAAa;AACXJ,UAAMI,OAAN,CAAcW,OAAd;AACD;AACF,CAJD;;AAMAjB,KAAK,OAAL,EAAckB,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACD,CAFD;;AAIApB,KAAKqB,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,iCAAjC;AACAL,IAAEI,IAAF,yBAAO,iEAAWZ,SAAX,wBAAqBa,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,mCAApC;AACD,CAHD","file":"agent-test.js","sourcesContent":["'use stric'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nlet db = null\nlet AgentStub = null\nlet sandbox = null\n\nlet config = {\n  loggin: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n  const setupDataBase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDataBase(config)\n})\n\ntest.afterEach(() => {\n  if (sandbox) {\n    sinon.sandbox.restore()\n  }\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(MetricStub.belongsTo.called, 'MetricStub.belongsTo was executed')\n})\n"]}